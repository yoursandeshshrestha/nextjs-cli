#!/usr/bin/env node

import chalk from "chalk";
import fs from "fs-extra";
import path from "path";
import { fileURLToPath } from "url";
import ora from "ora";
import { execa } from "execa";
import inquirer from "inquirer";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

async function runCreateNextApp(projectName) {
  const args = ["create-next-app@latest", projectName];
  await execa("npx", args, { stdio: "inherit" });
}

async function cleanupFiles(projectPath) {
  await fs.emptyDir(path.join(projectPath, "public"));

  const potentialDirs = ["app", "src/app"];
  for (const dir of potentialDirs) {
    const appDir = path.join(projectPath, dir);
    const fontsPath = path.join(appDir, "fonts");
    const faviconPath = path.join(appDir, "favicon.ico");

    if (await fs.pathExists(fontsPath)) {
      await fs.remove(fontsPath);
    }
    if (await fs.pathExists(faviconPath)) {
      await fs.remove(faviconPath);
    }
  }
}

async function updateProjectFiles(projectPath, isTypescript) {
  const potentialDirs = ["app", "src/app"];
  let appDir;

  for (const dir of potentialDirs) {
    if (await fs.pathExists(path.join(projectPath, dir))) {
      appDir = path.join(projectPath, dir);
      break;
    }
  }

  if (!appDir) {
    console.error(chalk.red("App directory not found."));
    process.exit(1);
  }

  const globalCssContent = `@tailwind base;
@tailwind components;
@tailwind utilities;`;
  await fs.writeFile(path.join(appDir, "globals.css"), globalCssContent);

  const layoutExtension = isTypescript ? "tsx" : "js";
  const layoutContent = `import ${
    isTypescript ? "type { Metadata }" : "{ Metadata }"
  } from "next";
import "./globals.css";

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}${isTypescript ? ": Readonly<{ children: React.ReactNode }>" : ""}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}`;
  await fs.writeFile(
    path.join(appDir, `layout.${layoutExtension}`),
    layoutContent
  );

  const pageExtension = isTypescript ? "tsx" : "js";
  const pageContent = `export default function Home() {
  return <div>Basic app</div>;
}`;
  await fs.writeFile(path.join(appDir, `page.${pageExtension}`), pageContent);
}

async function main() {
  console.log(chalk.blue("Welcome to basic-next-app!"));

  const { projectName } = await inquirer.prompt([
    {
      type: "input",
      name: "projectName",
      message: "What is your project named?",
      default: "my-app",
      validate: (input) =>
        /^[a-z]+(-[a-z]+)*$/.test(input) ||
        "Please use only lowercase letters and hyphens.",
      filter: (input) => input.toLowerCase(),
    },
  ]);

  const projectPath = path.join(process.cwd(), projectName);
  const spinner = ora("Setting up project...").start();

  try {
    if (await fs.pathExists(projectPath)) {
      spinner.fail(
        chalk.red(
          `Directory ${projectName} already exists. Please choose a different name.`
        )
      );
      process.exit(1);
    }

    spinner.stop();
    console.log(chalk.cyan("\nCreating Next.js project...\n"));
    await runCreateNextApp(projectName);

    const isTypescript = await fs.pathExists(
      path.join(projectPath, "tsconfig.json")
    );

    spinner.start("Cleaning up project files...");
    await cleanupFiles(projectPath);
    spinner.succeed("Project files cleaned up");

    spinner.start("Updating project files...");
    await updateProjectFiles(projectPath, isTypescript);
    spinner.succeed(
      chalk.green("Project created and customized successfully!")
    );

    console.log("\nNext steps:");
    console.log(chalk.cyan(`  cd ${projectName}`));
    console.log(chalk.cyan("  npm run dev"));
  } catch (error) {
    spinner.fail("Failed to create project");
    console.error(chalk.red("\nError details:"));
    console.error(error);
    process.exit(1);
  }
}

main().catch((error) => {
  console.error(chalk.red("\nUnexpected error:"));
  console.error(error);
  process.exit(1);
});
